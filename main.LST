C51 COMPILER V9.00   MAIN                                                                  09/06/2017 12:00:14 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE main.c COMPACT WARNINGLEVEL(0) BROWSE INCDIR(..\Common;..\Include) DEBUG OB
                    -JECTEXTEND TABS(2) OBJECT(.\output\main.obj)

line level    source

   1          #include "SmartM_8051.h"
   2          //#include <stdio.h>
   3          //#include <stdlib.h>
   4          #include <string.h>
   5          
   6          //按键状态机
   7          #define KEY_PORT            P3     //按键IO
   8          #define KEY_PORT_MASK       0x3C   //按键掩码
   9          
  10          #define KEY_SEARCH_STATUS   0      //查询按键状态
  11          #define KEY_ACK_STATUS      1      //确认按键状态
  12          #define KEY_REALEASE_STATUS 2      //释放按键状态
  13          
  14          //设备工作状态机
  15          #define MOTO_STOP   0
  16          #define MOTO_RUN    1
  17          #define MOTO_PASUE  2
  18          #define LID_UP      3
  19          
  20          UINT8  MOTO_STATE;
  21          
  22          
  23          #define TIME_10MS           (65536-FOSC/1000)
  24          
  25          //测试地址
  26          #define IAP_ADDRESS 0x0400
  27          #define TIME_HIGH_ADDRESS  IAP_ADDRESS
  28          #define TIME_LOW_ADDRESS  IAP_ADDRESS+2
  29          #define SPEED_HIGH_ADDRESS  0x0500
  30          #define SPEED_LOW_ADDRESS  SPEED_HIGH_ADDRESS+2
  31          
  32          
  33          UINT8 time_low,time_high;
  34          UINT8 speed_low,speed_high;
  35          
  36          BOOL  g_bTimer1IRQ=FALSE;
  37          
  38          UINT16 RUN_TIME,MOTOR_SPEED,RUN_TIME_COUNTER;
  39          STATIC UINT8  g_szTempBuf[4]={0},g_szTemp[2];
  40          UINT16 MINUTE,SECOND;
  41          
  42          
  43          /****************************************
  44          *函数名称:KeyInit
  45          *输    入:无
  46          *输    出:无
  47          *功    能:按键初始化
  48          ******************************************/
  49          VOID KeyInit(VOID)
  50          {
  51   1           P3M1|=  (1<<2)|(1<<3)|(1<<4)|(1<<5);
  52   1           P3M0&=~((1<<2)|(1<<3)|(1<<4)|(1<<5));
  53   1      }
  54          /****************************************
C51 COMPILER V9.00   MAIN                                                                  09/06/2017 12:00:14 PAGE 2   

  55          *函数名称:LcdKey1
  56          *输    入:无
  57          *输    出:无
  58          *功    能:虚拟按键1
  59          ******************************************/
  60          VOID LcdKey1(VOID)
  61          {
  62   1         LcdFill(20,50,70,100,BLACK);     //KEY1按下
  63   1      
  64   1         MOTO_STATE=MOTO_RUN; 
  65   1      //    speed_high=IapReadByte(TIME_HIGH_ADDRESS);      // 读取存贮时间数据的高八位;
  66   1      //    speed_low=IapReadByte(TIME_LOW_ADDRESS);        // 读取存贮时间数据的低八位;
  67   1      //    Delay(10);     
  68   1      //    
  69   1      //    RUN_TIME=(speed_high<<8)|(speed_low);     //合并成16位数据格式
  70   1      }
  71          /****************************************
  72          *函数名称:LcdKey2
  73          *输    入:无
  74          *输    出:无
  75          *功    能:虚拟按键2
  76          ******************************************/
  77          VOID LcdKey2(VOID)
  78          {
  79   1         LcdFill(180,50,230,100,BLACK);   //KEY2按下
  80   1         
  81   1         MOTO_STATE=MOTO_STOP;  
  82   1      //   
  83   1      //    speed_high=(UINT8)(RUN_TIME>>8);
  84   1      //    speed_low=(UINT8)(RUN_TIME);
  85   1      //    
  86   1      
  87   1      }
  88          /****************************************
  89          *函数名称:LcdKey3
  90          *输    入:无
  91          *输    出:无
  92          *功    能: 速度增加
  93          ******************************************/
  94          VOID LcdKey3(VOID)
  95          {
  96   1         LcdFill(20,150,70,200,BLACK);    //KEY3按下
  97   1          
  98   1      //    if(MOTO_STATE!=MOTO_RUN)
  99   1      //    {
 100   1      //       if(RUN_TIME>=1200)
 101   1      //       {
 102   1      //          RUN_TIME=1200;
 103   1      //       }else
 104   1      //       {
 105   1      //         RUN_TIME++;
 106   1      //       }
 107   1      //     }      
 108   1      //    
 109   1      //    time_high=(UINT8)(RUN_TIME>>8);
 110   1      //    time_low=(UINT8)RUN_TIME;
 111   1      
 112   1      //    IapEraseSector(TIME_HIGH_ADDRESS);    //扇区擦除
 113   1      //    Delay(10);     //擦除扇区需要点延时，保证完成最好检测下返回值是否FF;
 114   1      //    IapEraseSector(TIME_LOW_ADDRESS);    //扇区擦除
 115   1      //    Delay(10);   
 116   1      //    
C51 COMPILER V9.00   MAIN                                                                  09/06/2017 12:00:14 PAGE 3   

 117   1      //    IapProgramByte(TIME_HIGH_ADDRESS,time_high);      // 写入存贮时间数据的高八位;
 118   1      //    IapProgramByte(TIME_LOW_ADDRESS,time_low);        // 写入存贮时间数据的低八位;
 119   1      //    Delay(10);    
 120   1      //    
 121   1      //    Delay(10);    
 122   1      //    UartSendByte(time_high);
 123   1      //    Delay(10);     
 124   1      //    UartSendByte(time_low); 
 125   1      //    Delay(10);      
 126   1      
 127   1      
 128   1      
 129   1         if(MOTOR_SPEED>=1750)
 130   1         {
 131   2            MOTOR_SPEED=1750;
 132   2         }else
 133   1         {
 134   2           MOTOR_SPEED++;
 135   2         }
 136   1      
 137   1        
 138   1          //非运行状态下数据写入FLASH
 139   1          if(MOTO_STATE!=MOTO_RUN)
 140   1          {
 141   2              speed_high=(UINT8)(MOTOR_SPEED>>8);
 142   2              speed_low=(UINT8)MOTOR_SPEED;
 143   2              Delay(10);    
 144   2              UartSendByte(speed_high);
 145   2              Delay(10);     
 146   2              UartSendByte(speed_low); 
 147   2              Delay(10); 
 148   2      
 149   2              IapEraseSector(SPEED_HIGH_ADDRESS);    //扇区擦除
 150   2      //        Delay(10);     //擦除扇区需要点延时，保证完成最好检测下返回值是否FF;
 151   2              IapEraseSector(SPEED_LOW_ADDRESS);    //扇区擦除
 152   2              Delay(10);   
 153   2      //        
 154   2              IapProgramByte(SPEED_HIGH_ADDRESS,speed_high);
 155   2              IapProgramByte(SPEED_LOW_ADDRESS,speed_low);
 156   2              
 157   2              UartSendByte(speed_high);
 158   2              Delay(10);     
 159   2              UartSendByte(speed_low); 
 160   2              Delay(10); 
 161   2          }
 162   1      }
 163          
 164          /****************************************
 165          *函数名称:LcdKey4
 166          *输    入:无
 167          *输    出:无
 168          *功    能:速度减少
 169          ******************************************/
 170          VOID LcdKey4(VOID)
 171          {
 172   1          LcdFill(180,150,230,200,BLACK);  //KEY4按下 
 173   1          
 174   1      //    if(MOTO_STATE!=MOTO_RUN)
 175   1      //    {
 176   1      //       if(RUN_TIME<=1)
 177   1      //       {
 178   1      //          RUN_TIME=1;
C51 COMPILER V9.00   MAIN                                                                  09/06/2017 12:00:14 PAGE 4   

 179   1      //       }else
 180   1      //       {
 181   1      //         RUN_TIME--;
 182   1      //       }
 183   1      //     }      
 184   1      //    time_high=(UINT8)(RUN_TIME>>8);
 185   1      //    time_low=(UINT8)RUN_TIME;
 186   1      
 187   1      //    IapEraseSector(TIME_HIGH_ADDRESS);    //扇区擦除
 188   1      //    Delay(10);     //擦除扇区需要点延时，保证完成最好检测下返回值是否FF;
 189   1      //    IapEraseSector(TIME_LOW_ADDRESS);    //扇区擦除
 190   1      //    Delay(10);   
 191   1      //    
 192   1      //    IapProgramByte(TIME_HIGH_ADDRESS,time_high);      // 写入存贮时间数据的高八位;
 193   1      //    IapProgramByte(TIME_LOW_ADDRESS,time_low);        // 写入存贮时间数据的低八位;
 194   1      //    Delay(10);    
 195   1      //    
 196   1      //    Delay(10);    
 197   1      //    UartSendByte(time_high);
 198   1      //    Delay(10);     
 199   1      //    UartSendByte(time_low); 
 200   1      //    Delay(10);    
 201   1      
 202   1           if(MOTOR_SPEED<=300)
 203   1           {
 204   2                MOTOR_SPEED=300;
 205   2           }else
 206   1           {
 207   2                MOTOR_SPEED--;
 208   2           }
 209   1          
 210   1        
 211   1          //非运行状态下数据写入FLASH
 212   1          if(MOTO_STATE!=MOTO_RUN)
 213   1          {
 214   2              speed_high=(UINT8)(MOTOR_SPEED>>8);
 215   2              speed_low=(UINT8)MOTOR_SPEED;
 216   2              Delay(10);    
 217   2              UartSendByte(speed_high);
 218   2              Delay(10);     
 219   2              UartSendByte(speed_low); 
 220   2              Delay(10); 
 221   2      
 222   2              IapEraseSector(SPEED_HIGH_ADDRESS);    //扇区擦除
 223   2      //        Delay(10);     //擦除扇区需要点延时，保证完成最好检测下返回值是否FF;
 224   2              IapEraseSector(SPEED_LOW_ADDRESS);    //扇区擦除
 225   2              Delay(10);   
 226   2      //        
 227   2              IapProgramByte(SPEED_HIGH_ADDRESS,speed_high);
 228   2              IapProgramByte(SPEED_LOW_ADDRESS,speed_low);
 229   2              
 230   2              UartSendByte(speed_high);
 231   2              Delay(10);     
 232   2              UartSendByte(speed_low); 
 233   2              Delay(10); 
 234   2          }
 235   1      }
 236          /****************************************
 237          *函数名称:SECOND_MINUTE
 238          *输    入:无
 239          *输    出:无
 240          *功    能:秒数转为分秒格式
C51 COMPILER V9.00   MAIN                                                                  09/06/2017 12:00:14 PAGE 5   

 241          ******************************************/
 242          VOID SECOND_MINUTE(UINT16 SEC)
 243          {
 244   1          MINUTE=SEC/60;
 245   1          SECOND=SEC%60;  
 246   1        
 247   1      }
 248          /****************************************
 249          *函数名称:Data_Moto_Speed_Init
 250          *输    入:无
 251          *输    出:无
 252          *功    能:
 253          ******************************************/
 254          VOID Data_Moto_Speed_Init(VOID)
 255          { 
 256   1        
 257   1      //    Delay(10); 
 258   1      //    
 259   1      //    RUN_TIME=999;
 260   1      //    time_high=RUN_TIME>>8;
 261   1      //    time_low=RUN_TIME;
 262   1      //    speed_high=0x03;
 263   1      //    speed_low=0xE8;   
 264   1      //    
 265   1      //  //第一次写芯片时用于写入EEPROM时间数据  写入EEPROM速度数据        
 266   1      //  IapEraseSector(TIME_HIGH_ADDRESS);    //扇区擦除
 267   1      //  IapEraseSector(TIME_LOW_ADDRESS);    //扇区擦除
 268   1      //  IapEraseSector(SPEED_HIGH_ADDRESS);    //扇区擦除
 269   1      //  IapEraseSector(SPEED_LOW_ADDRESS);    //扇区擦除
 270   1      //  Delay(10);  //擦除扇区需要点延时，保证完成最好检测下返回值是否FF;
 271   1      //  IapProgramByte(TIME_HIGH_ADDRESS, time_high);     // 写入存贮时间数据的高八位;
 272   1      //  IapProgramByte(TIME_LOW_ADDRESS, time_low);       // 读取存贮时间数据的低八位;
 273   1      //  IapProgramByte(SPEED_HIGH_ADDRESS,speed_high );
 274   1      //  IapProgramByte(SPEED_LOW_ADDRESS,speed_low );
 275   1      //  Delay(10);  
 276   1          
 277   1          time_high=(IapReadByte(TIME_HIGH_ADDRESS));
 278   1          time_low=(IapReadByte(TIME_LOW_ADDRESS));
 279   1          speed_high=(IapReadByte(SPEED_HIGH_ADDRESS));
 280   1          speed_low=(IapReadByte(SPEED_LOW_ADDRESS));
 281   1          
 282   1          
 283   1          RUN_TIME=(time_high<<8)|(time_low);     //合并成16位数据格式
 284   1          MOTOR_SPEED=(speed_high<<8)|(speed_low);    
 285   1      //    
 286   1          
 287   1      
 288   1      
 289   1          Delay(100);   
 290   1      
 291   1        
 292   1      }
 293          /****************************************
 294          *函数名称:LcdKeyRst
 295          *输    入:无
 296          *输    出:无
 297          *功    能:虚拟按键恢复为释放状态
 298          ******************************************/
 299          VOID LcdKeyRst(VOID)
 300          {
 301   1         //时间初始化显示
 302   1                
C51 COMPILER V9.00   MAIN                                                                  09/06/2017 12:00:14 PAGE 6   

 303   1         LcdFill(20,50,70,100,RED);             //KEY1
 304   1         LcdFill(180,50,230,100,RED);           //KEY2
 305   1         LcdFill(20,150,70,200,RED);            //KEY3
 306   1         LcdFill(180,150,230,200,RED);          //KEY4
 307   1      
 308   1         LcdShowString(35,70, "K1",YELLOW,RED); //填充'1'
 309   1         LcdShowString(195,70,"K2",YELLOW,RED); //填充'2'
 310   1         LcdShowString(35,170,"K3",YELLOW,RED); //填充'3'
 311   1         LcdShowString(195,170,"K4",YELLOW,RED);//填充'4'
 312   1         
 313   1      
 314   1         LcdFill(20,210,70,250,BLUE);             //KEY1   
 315   1         LcdShowString(25,215, "时间:",YELLOW,BLUE);
 316   1         
 317   1         LcdFill(20,260,70,300,BLUE); 
 318   1         LcdShowString(25,265,"速度:",YELLOW,BLUE); 
 319   1      //   sprintf(g_szTempBuf,"%04d",MOTOR_SPEED);
 320   1         LcdShowString(75,265,g_szTempBuf,BLUE,WHITE); 
 321   1      
 322   1      }
 323          
 324          /****************************************
 325          *函数名称:Timer1Init
 326          *输    入:无
 327          *输    出:无
 328          *功    能:定时器1初始化 
 329          ******************************************/
 330          VOID Timer1Init(VOID)
 331          {
 332   1      //     AUXR|=0x40;
 333   1      //     TL1=(UINT8) TIME_10MS;
 334   1      //     TH1=(UINT8)(TIME_10MS>>8);
 335   1      //     TMOD|=0x10;
 336   1      //     TR1=1;
 337   1      
 338   1            AUXR |= 0x40;   //定时器时钟1T模式
 339   1            TMOD &= 0x0F;   //设置定时器模式
 340   1            TL1 = 0x40;   //设置定时初值
 341   1            TH1 = 0xA2;   //设置定时初值
 342   1            TF1 = 0;    //清除TF1标志
 343   1            TR1 = 1;    //定时器1开始计时
 344   1      
 345   1            ET1=1;
 346   1      }
 347          
 348          
 349          
 350          /****************************************
 351          *函数名称:KeyRead
 352          *输    入:无
 353          *输    出:无
 354          *功    能:按键值读取
 355          ******************************************/
 356          VOID KeyRead(VOID)
 357          {
 358   1          STATIC UINT8 ucKeyStatus=KEY_SEARCH_STATUS;
 359   1                 UINT8 ucKeyValue=0;
 360   1                 UINT8 i=0;
 361   1          
 362   1          /*   获取按键值 */
 363   1          ucKeyValue=(~KEY_PORT)&KEY_PORT_MASK;   
 364   1        
C51 COMPILER V9.00   MAIN                                                                  09/06/2017 12:00:14 PAGE 7   

 365   1          switch(ucKeyStatus)
 366   1          {
 367   2            /* 按键查询状态 */
 368   2            case KEY_SEARCH_STATUS:
 369   2                {
 370   3                     if(ucKeyValue)
 371   3                     {
 372   4                        ucKeyStatus=KEY_ACK_STATUS;
 373   4                     }
 374   3      
 375   3                }break;
 376   2                
 377   2            /* 按键确认状态 */
 378   2            case KEY_ACK_STATUS:   
 379   2                {
 380   3                     if(!ucKeyValue) //没有按键按下
 381   3                     {
 382   4                        ucKeyStatus=KEY_SEARCH_STATUS;
 383   4                     }
 384   3                     else//有按键按下
 385   3                     {  
 386   4      
 387   4                        if(ucKeyValue & (1<<2))LcdKey1();
 388   4                        if(ucKeyValue & (1<<3))LcdKey2();
 389   4                        if(ucKeyValue & (1<<4))LcdKey3();
 390   4                        if(ucKeyValue & (1<<5))LcdKey4();
 391   4      
 392   4                     }
 393   3      
 394   3                     ucKeyStatus=KEY_REALEASE_STATUS;
 395   3                     
 396   3                     
 397   3                }break;
 398   2            /* 按键释放状态 */
 399   2            case KEY_REALEASE_STATUS:
 400   2                {
 401   3                     if(!ucKeyValue)   //按键释放
 402   3                     {
 403   4                         ucKeyStatus=KEY_SEARCH_STATUS;
 404   4                       
 405   4                         LcdKeyRst();                            
 406   4                     }
 407   3                 
 408   3                }break;
 409   2      
 410   2                default:break;
 411   2          }
 412   1      }
 413          
 414          /****************************************
 415          *函数名称:main
 416          *输    入:无
 417          *输    出:无
 418          *功    能:函数主体
 419          ******************************************/
 420          VOID main(VOID)
 421          {
 422   1      
 423   1      
 424   1         UartInit(9600);  
 425   1          
 426   1          
C51 COMPILER V9.00   MAIN                                                                  09/06/2017 12:00:14 PAGE 8   

 427   1         /*   LCD 初始化 */
 428   1         LcdTypeSet(LCD_TYPE_32);
 429   1         LcdInit(LCD_FONT_IN_FLASH,LCD_DIRECTION_180);                                  
 430   1         LcdCleanScreen(WHITE);     
 431   1      
 432   1         
 433   1         /*   LED 初始化 */
 434   1         LedInit();
 435   1      
 436   1         /*   SPI FLash 初始化 */
 437   1         SpiFlashInit();  
 438   1         
 439   1         MOTO_STATE=0;
 440   1         RUN_TIME=820;        
 441   1         MOTOR_SPEED=900;
 442   1         RUN_TIME_COUNTER=0;
 443   1         MINUTE=0;
 444   1         SECOND=0;
 445   1         MOTO_STATE=MOTO_STOP;
 446   1      
 447   1      
 448   1          LcdShowString(80,10,"研磨机控制程序",BLUE,WHITE);
 449   1          LcdShowString(100,30,"V2.0 ",BLUE,WHITE);
 450   1      
 451   1      
 452   1         /*   按键 初始化 */
 453   1         KeyInit();
 454   1         LcdKeyRst();
 455   1         
 456   1         Data_Moto_Speed_Init();  
 457   1         
 458   1         /*   定时器 初始化 */
 459   1         Timer1Init(); 
 460   1         
 461   1         IRQ_ENABLE();        
 462   1      
 463   1         while(1)
 464   1         {  
 465   2      
 466   2               
 467   2               if(g_bTimer1IRQ)
 468   2              {
 469   3                    g_bTimer1IRQ=FALSE;
 470   3                    
 471   3                    /* 按键读取 */
 472   3                    KeyRead();     
 473   3                            
 474   3                    sprintf(g_szTempBuf,"%04d",RUN_TIME);       //sprintf只能对双字节UINT16进行操作
 475   3                    LcdShowString(100,120,g_szTempBuf,BLUE,WHITE);
 476   3                  
 477   3                    SECOND_MINUTE(RUN_TIME);                  //将数据格式转换为分:秒 格式
 478   3                    sprintf(g_szTempBuf,"%02d",MINUTE);       //sprintf只能对双字节UINT16进行操作
 479   3                    LcdShowString(75,215,g_szTempBuf,BLUE,WHITE);
 480   3                    sprintf(g_szTempBuf,":%02d",SECOND);
 481   3                    LcdShowString(107,215,g_szTempBuf,BLUE,WHITE);
 482   3                    
 483   3                    sprintf(g_szTempBuf,"%04d",MOTOR_SPEED);
 484   3                    LcdShowString(75,265,g_szTempBuf,BLUE,WHITE); 
 485   3              }
 486   2             
 487   2         }
 488   1      
C51 COMPILER V9.00   MAIN                                                                  09/06/2017 12:00:14 PAGE 9   

 489   1      
 490   1      }
 491          
 492          /****************************************
 493          *函数名称:TMR1_IRQHandler
 494          *输    入:无
 495          *输    出:无
 496          *功    能:定时器1中断服务函数
 497          ******************************************/
 498          VOID Timer1_ISR(VOID) interrupt 3 using 1
 499          {
 500   1          g_bTimer1IRQ=TRUE;
 501   1      
 502   1      //  TL1=(UINT8) TIME_10MS;
 503   1      //  TH1=(UINT8)(TIME_10MS>>8);
 504   1      
 505   1          /* 定时器1重装载 */
 506   1          TL1 = 0x40;   //设置定时初值
 507   1          TH1 = 0xA2;   //设置定时初值
 508   1      
 509   1          
 510   1          if(MOTO_STATE==MOTO_RUN)        //非运行状态下 才允许调整时间
 511   1          {
 512   2              if(RUN_TIME_COUNTER>=1000)    //1秒计时
 513   2              {
 514   3                   RUN_TIME_COUNTER=0;
 515   3                   RUN_TIME--;
 516   3              }
 517   2              
 518   2               RUN_TIME_COUNTER++;
 519   2          }
 520   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1518    ----
   CONSTANT SIZE    =     61    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     23       2
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
