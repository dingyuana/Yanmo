C51 COMPILER V9.54   PCA                                                                   11/02/2017 13:32:45 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE PCA
OBJECT MODULE PLACED IN .\output\PCA.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE PCA.c COMPACT ROM(COMPACT) OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Common;.\In
                    -clude) DEBUG OBJECTEXTEND PRINT(.\Include\PCA.lst) TABS(2) OBJECT(.\output\PCA.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          
  15          #include  "PCA.h"
  16          
  17          bit   B_Capture0,B_Capture1,B_Capture2;
  18          u8    PCA0_mode,PCA1_mode,PCA2_mode;
  19          u16   CCAP0_tmp,PCA_Timer0;
  20          u16   CCAP1_tmp,PCA_Timer1;
  21          u16   CCAP2_tmp,PCA_Timer2;
  22          
  23          /*************  功能说明  **************
  24          
  25          
  26          ******************************************/
  27          
  28          u16 PWM0_low; //PWM输出低电平的PCA时钟脉冲个数, 用户层不可见。
  29          u16 PWM1_low; //PWM输出低电平的PCA时钟脉冲个数, 用户层不可见。
  30          u16 PWM2_low; //PWM输出低电平的PCA时钟脉冲个数, 用户层不可见。
  31          
  32          
  33          //========================================================================
  34          // 函数: void PWMn_Update(u8 PCA_id, u16 high)
  35          // 描述: 更新占空比数据。
  36          // 参数: high:  占空比数据，即PWM输出高电平的PCA时钟脉冲个数。
  37          // 返回: 无
  38          // 版本: VER1.0
  39          // 日期: 2013-5-15
  40          // 备注: 
  41          //========================================================================
  42          void PWMn_Update(u8 PCA_id, u16 high)
  43          {
  44   1        if(PCA_id == PCA0)
  45   1        {
  46   2          if(high > PWM_HIGH_MAX) high = PWM_HIGH_MAX;  //如果写入大于最大占空比数据，强制为最大占空比。
  47   2          if(high < PWM_HIGH_MIN) high = PWM_HIGH_MIN;  //如果写入小于最小占空比数据，强制为最小占空比。
  48   2          CR = 0;             //停止PCA。
  49   2          PCA_Timer0 = high;        //数据在正确范围，则装入占空比寄存器。
  50   2          PWM0_low = PWM_DUTY - high; //计算并保存PWM输出低电平的PCA时钟脉冲个数。
  51   2          CR = 1;             //启动PCA。
  52   2        }
  53   1        else if(PCA_id == PCA1)
  54   1        {
C51 COMPILER V9.54   PCA                                                                   11/02/2017 13:32:45 PAGE 2   

  55   2          if(high > PWM_HIGH_MAX) high = PWM_HIGH_MAX;  //如果写入大于最大占空比数据，强制为最大占空比。
  56   2          if(high < PWM_HIGH_MIN) high = PWM_HIGH_MIN;  //如果写入小于最小占空比数据，强制为最小占空比。
  57   2          CR = 0;             //停止PCA。
  58   2          PCA_Timer1 = high;        //数据在正确范围，则装入占空比寄存器。
  59   2          PWM1_low = PWM_DUTY - high; //计算并保存PWM输出低电平的PCA时钟脉冲个数。
  60   2          CR = 1;             //启动PCA。
  61   2        }
  62   1        else if(PCA_id == PCA2)
  63   1        {
  64   2          if(high > PWM_HIGH_MAX)   high = PWM_HIGH_MAX;  //如果写入大于最大占空比数据，强制为最大占空比。
  65   2          if(high < PWM_HIGH_MIN)   high = PWM_HIGH_MIN;  //如果写入小于最小占空比数据，强制为最小占空比。
  66   2          CR = 0;             //停止PCA。
  67   2          PCA_Timer2 = high;        //数据在正确范围，则装入占空比寄存器。
  68   2          PWM2_low = PWM_DUTY - high; //计算并保存PWM输出低电平的PCA时钟脉冲个数。
  69   2          CR = 1;             //启动PCA。
  70   2        }
  71   1      }
  72          
  73          
  74          
  75          //========================================================================
  76          // 函数: void UpdatePwm(u8 PCA_id, u8 pwm_value)
  77          // 描述: 更新PWM值. 
  78          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  79          //     pwm_value: pwm值, 这个值是输出低电平的时间.
  80          // 返回: none.
  81          // 版本: V1.0, 2012-11-22
  82          //========================================================================
  83          /*
  84          void  UpdatePwm(u8 PCA_id, u8 pwm_value)
  85          {
  86            if(PCA_id == PCA0)    CCAP0H = pwm_value;
  87            else if(PCA_id == PCA1) CCAP1H = pwm_value;
  88            else if(PCA_id == PCA2) CCAP2H = pwm_value;
  89          }
  90          */
  91          
  92          //========================================================================
  93          // 函数: void PCA_Init(PCA_id, PCA_InitTypeDef *PCAx)
  94          // 描述: PCA初始化程序.
  95          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  96          //     PCAx: 结构参数,请参考PCA.h里的定义.
  97          // 返回: none.
  98          // 版本: V1.0, 2012-11-22
  99          //========================================================================
 100          void  PCA_Init(u8 PCA_id, PCA_InitTypeDef *PCAx)
 101          {
 102   1        if(PCA_id > PCA_Counter)  return;   //id错误
 103   1      
 104   1        if(PCA_id == PCA_Counter)     //设置公用Counter
 105   1        {
 106   2          CR = 0;
 107   2          CH = 0;
 108   2          CL = 0;
 109   2          AUXR1 = (AUXR1 & ~(3<<4)) | PCAx->PCA_IoUse;      //切换IO口
 110   2          CMOD  = (CMOD  & ~(7<<1)) | PCAx->PCA_Clock;      //选择时钟源
 111   2          CMOD  = (CMOD  & ~1) | (PCAx->PCA_Interrupt_Mode & 1);  //ECF
 112   2          if(PCAx->PCA_Polity == PolityHigh)    PPCA = 1; //高优先级中断
 113   2          else                  PPCA = 0; //低优先级中断
 114   2          if(PCAx->PCA_RUN == ENABLE) CR = 1;
 115   2          return;
 116   2        }
C51 COMPILER V9.54   PCA                                                                   11/02/2017 13:32:45 PAGE 3   

 117   1      
 118   1        PCAx->PCA_Interrupt_Mode &= (3<<4) + 1;
 119   1        if(PCAx->PCA_Mode >= PCA_Mode_SoftTimer)  PCAx->PCA_Interrupt_Mode &= ~(3<<4);
 120   1      
 121   1        if(PCA_id == PCA0)
 122   1        {
 123   2          CCAPM0    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;  //工作模式, 中断模式
 124   2          PCA_PWM0  = (PCA_PWM0 & ~(3<<6)) | PCAx->PCA_PWM_Wide;  //PWM宽度
 125   2      
 126   2          PCA_Timer0 = PCAx->PCA_Value;
 127   2          B_Capture0 = 0;
 128   2          PCA0_mode = PCAx->PCA_Mode;
 129   2          CCAP0_tmp = PCA_Timer0;
 130   2          CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 131   2          CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 132   2        }
 133   1        if(PCA_id == PCA1)
 134   1        {
 135   2          CCAPM1    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 136   2          PCA_PWM1  = (PCA_PWM1 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 137   2      
 138   2          PCA_Timer1 = PCAx->PCA_Value;
 139   2          B_Capture1 = 0;
 140   2          PCA1_mode = PCAx->PCA_Mode;
 141   2          CCAP1_tmp = PCA_Timer1;
 142   2          CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 143   2          CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 144   2        }
 145   1        if(PCA_id == PCA2)
 146   1        {
 147   2          CCAPM2    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 148   2          PCA_PWM2  = (PCA_PWM2 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 149   2      
 150   2          PCA_Timer2 = PCAx->PCA_Value;
 151   2          B_Capture2 = 0;
 152   2          PCA2_mode = PCAx->PCA_Mode;
 153   2          CCAP2_tmp = PCA_Timer2;
 154   2          CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 155   2          CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 156   2        }
 157   1      }
 158          
 159          
 160          //========================================================================
 161          // 函数: void PCA_Handler (void) interrupt PCA_VECTOR
 162          // 描述: PCA中断处理程序.
 163          // 参数: None
 164          // 返回: none.
 165          // 版本: V1.0, 2012-11-22
 166          //========================================================================
 167          void  PCA_Handler (void) interrupt PCA_VECTOR
 168          {
 169   1        if(CCF0)    //PCA模块0中断
 170   1        {
 171   2          CCF0 = 0;   //清PCA模块0中断标志
 172   2          if(P25) CCAP0_tmp += PCA_Timer0;  //输出为高电平，则给影射寄存器装载高电平时间长度
 173   2          else  CCAP0_tmp += PWM0_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 174   2          CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 175   2          CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 176   2        }
 177   1      
 178   1        if(CCF1)  //PCA模块1中断
C51 COMPILER V9.54   PCA                                                                   11/02/2017 13:32:45 PAGE 4   

 179   1        {
 180   2          CCF1 = 0;   //清PCA模块1中断标志
 181   2          if(P26) CCAP1_tmp += PCA_Timer1;  //输出为高电平，则给影射寄存器装载高电平时间长度
 182   2          else  CCAP1_tmp += PWM1_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 183   2          CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 184   2          CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 185   2        }
 186   1      
 187   1        if(CCF2)  //PCA模块2中断
 188   1        {
 189   2          CCF2 = 0;   //清PCA模块1中断标志
 190   2          if(P27) CCAP2_tmp += PCA_Timer2;  //输出为高电平，则给影射寄存器装载高电平时间长度
 191   2          else  CCAP2_tmp += PWM2_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 192   2          CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 193   2          CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 194   2        }
 195   1      
 196   1      /*  if(CF)  //PCA溢出中断
 197   1        {
 198   1          CF = 0;     //清PCA溢出中断标志
 199   1        }
 200   1      */
 201   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1325    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     28    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
